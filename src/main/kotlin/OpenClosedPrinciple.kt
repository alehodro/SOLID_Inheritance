/* O- open-closed principle (принцип открытости-закрытости)
Программные сущности (классы, модули, функции и т.п.) должны быть открыты для расширения, но закрыты для изменения.
Это означает, что должна быть возможность изменять внешнее поведение класса, не внося физические изменения в сам класс.
Следуя этому принципу, классы разрабатываются так, чтобы для подстройки класса к конкретным условиям применения было
достаточно расширить его и переопределить некоторые функции.
Поэтому система должна быть гибкой, с возможностью работы в переменных условиях без изменения исходного кода.
*/

/*
Допустим есть класс кофеварка, у которого есть функция варки кофе. Мне нужно добавить к функции варки кофе функцию
оповещения о завершении процесса варки. Я могу добавить соотвествующую логику в класс CoffeeMaker, но тогда я нарушу
принцип OCP, изменив исходный код. Вместо этого я создаю класс наследник, в котором переопределяю функцию варки кофе
и добавляю функцию оповещения.
 */

open class CoffeeMaker{
    init {
        println("Coffeemaker is created")
    }
    open fun cookCoffee(){
        println("Coffee is cooked")
    }
}

class CoffeeMakerWithBeeper:CoffeeMaker(){
    init {
        println("Coffee maker with beeper is created")
    }
    override fun cookCoffee() {
        super.cookCoffee()
        println("Beep!")
    }
}